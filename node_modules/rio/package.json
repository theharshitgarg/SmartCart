{
  "name": "rio",
  "description": "Integration with Rserve, a TCP/IP server for R framework",
  "version": "2.4.1",
  "main": "index",
  "repository": {
    "type": "git",
    "url": "http://github.com/albertosantini/node-rio"
  },
  "keywords": [
    "Rserve",
    "R framework"
  ],
  "author": {
    "name": "Alberto Santini"
  },
  "license": "MIT",
  "engines": {
    "node": ">=0.10.x"
  },
  "dependencies": {
    "binary": "~0.3.0",
    "hexy": "~0.2.7"
  },
  "scripts": {
    "test": "npm run lint && npm run tape",
    "lint": "eslint lib/**/*.js examples/**/*.js test/**/*.js",
    "tape": "tape test/**/*-test.js"
  },
  "devDependencies": {
    "eslint": "^2.5.3",
    "eslint-config-eslint": "~3.0.0",
    "tape": "~4.5.1"
  },
  "readme": "RIO\n======\n[![Build Status](https://travis-ci.org/albertosantini/node-rio.png)](https://travis-ci.org/albertosantini/node-rio)\n[![NPM version](https://badge.fury.io/js/rio.png)](http://badge.fury.io/js/rio)\n[![NGN Dependencies](https://david-dm.org/albertosantini/node-rio.png)](https://david-dm.org/albertosantini/node-rio)\n\nRIO, R Input Output, connects an app to [Rserve](http://www.rforge.net/Rserve/),\na TCP/IP server which allows other programs to use facilities of [R](http://www.r-project.org).\n\nIt supports double, double array, integer, integer array, string, string array,\nboolean, boolean array objects and raw vector (images or files).\n\nIt supports also the plain text and crypted authentication, if Rserve is\nconfigured for that capability.\n\nThe main goal is to pass a string containing a script call using a JSON object\nas parameter. Then, inside the script, using `RJSONIO` or `jsonlite` package,\ndeserializing the JSON object, calling a method, serializing the response and\nreturning to Node.js.\n\nExamples\n========\n\n    var rio = require(\"rio\");\n\n    rio.e({command: \"pi / 2 * 2\"});\n    rio.e({command: \"c(1, 2)\"});\n    rio.e({command: \"as.character('Hello World')\"});\n    rio.e({command: \"c('a', 'b')\"});\n    rio.e({command: \"Sys.sleep(5); 11\"})\n\n    rio.$e({\n        command: \"pi / 2 * 2\"\n    }).then(function (res) {\n        console.log(res);\n    });\n\n    rio.e({\n        command: \"2 + 2\"\n    }).e({\n        command: \"3 + 3\"\n    });\n\nSee `examples` directory.\n\n- `ex1`: Getting started with `evaluate` api.\n- `ex2`: How to evaluate a `filename` and `entrypoint`.\n- `ex3`: How to evaluate a `filename` and `host`.\n- `ex4`: An example with utf-8 chars.\n- `ex5`: How to retrieve a plot.\n- `ex6`: How to call functions already loaded in R session.\n- `ex7`: An example with large data packet.\n- `ex8`: An example with `evaluateDefer` api.\n- `ex9`: An example chaining `evaluate` api.\n- `ex10`: How to evaluate a matrix, using JSON serialization.\n\nInstallation\n============\n\n[![NPM](https://nodei.co/npm/rio.png?downloads=true&downloadRank=true)](https://nodei.co/npm/rio/)\n[![NPM](https://nodei.co/npm-dl/rio.png)](https://nodei.co/npm/rio/)\n\nTo install with [npm](http://github.com/isaacs/npm):\n\n    npm install rio\n\nTested with Node.js 5.x and Rserve 1.7.3, on Windows 10 64 with R 3.2.2\nand on Debian Jessie (USB armory) with R 3.1.1.\n\nDon't forget to start [Rserve](http://cran.r-project.org/web/packages/Rserve/).\nFor instance, from R console, after installing the package Rserve:\n\n    require(\"Rserve\")\n    Rserve()\n\nTo shutdown the server from R console:\n\n    require(\"RSclient\")\n    c <- RSconnect()\n    RSshutdown(c)\n\nMethods\n=======\n\nevaluate(config) - e(config)\n----------------------------\n\nEvaluate a command, connecting to Rserve, executing the command and then\ndisconnecting. The result is passed to the callback.\n\nThe defaults for the options parameter:\n\n    config = {\n        command: \"\",\n        filename: \"\",\n\n        entrypoint: \"\",\n        data: {},\n\n        callback: function (err, res) {\n            if (!err) {\n                console.log(res);\n            } else {\n                console.log(\"Rserve call failed. \" + err);\n            }\n        },\n\n        host = \"127.0.0.1\",\n        port = \"6311\",\n        path = undefined,\n\n        user = \"anon\",\n        password = \"anon\"\n    }\n\n- `command` OR `filename` OR `entrypoint` need to be filled.\nOtherwise it is missing the evaluation object.\n\n- if `command` AND  `filename` AND `entrypoint` are empty then error.\nAs above, said in different way.\n\n- `command` AND `filename` are exclusive: if both are not empty then error.\nOtherwise what does rio evaluate, command or filename?\n\n- if `command` AND  `filename` are empty then `entrypoint` is mandatory.\nThis is the case when rio evaluates a function defined on R side.\n\n- `host` AND `path` are exclusive.\nrio needs to choose beetween net socket or unix socket transport.\n\nWhen `filename` is filled, rio loads the content of a R file, calling\nfinally an `entrypoint`, passing `data`.\n\n    config = {\n        filename: \"foo.R\",\n        entrypoint: \"main\", // entrypoint is called\n        data: { foo: \"bar\" } // data is stringified and passed to entrypoint\n    }\n\nWhen `entrypoint` is filled, finally passing `data`, it is used when we\nneed to call a function defined in Rserve instance.\n\n    config = {\n        entrypoint: \"echo\",\n        data: [\"test\", \"data\"],\n        callback: printEcho\n    }\n\nevaluateDefer(config) - $e(config)\n----------------------------------\n\nEvaluate a command, returning a promise: config options is the same as\n`evaluate`.\n\nshutdown(options)\n-----------------\n\nSends the `CMD_shutdown` command to the Rserve server. Options are the same as\nfor `evaluate`.\n\nenableDebug(isDebug)\n-----------\n\nIt enables debugging mode, printing the packet and logging messages on client\nside.\n\nYou may start also a Rserve instance in debugging mode with following commands\n(on Windows box with Git Bash Shell):\n\n```\nexport R_PATH=/c/My/Programs/R\nexport PATH=$PATH:$R_PATH/bin/x64\n\n$R_PATH/library/Rserve/libs/x64/Rserve_d.exe --\n```\n\nSet your paths accordingly.\n\nenableRecordMode(isRecordMode, options)\n----------------\n\nIt enables record mode, dumping the incoming data to a file specified in the\noptions.\n\n    options = {\n        fileName: \"node-rio-dump.bin\"\n    }\n\nIt is useful to record a Rserve session to replay it in an environment without\n[Rserve](http://cran.r-project.org/web/packages/Rserve/) (for example\n[Travis CI](https://travis-ci.org/)). For instance,\n\n```\n> var rio=require(\"./index.js\")\nundefined\n> rio.enableRecordMode(true, {fileName: \"test/dump/integer-test.bin\"});\nundefined\n> rio.evaluate({command: \"as.integer(3)\"})\nundefined\n> 3\n(^C again to quit)\n```\n\nThen, you need to export the variable `CI` to emulate CI environment:\n`export CI=true`\n\nEventually `npm test`.\n\nenablePlaybackMode(isPlaybackMode, options)\n------------------\n\nIt enables playback mode, reading a dump file instead connecting to the server.\n\n    options = {\n        fileName: \"node-rio-dump.bin\"\n    }\n\n\nContributors\n============\n\n```\nproject  : node-rio\nrepo age : 4 years, 5 months\nactive   : 111 days\ncommits  : 256\nfiles    : 59\nauthors  :\n  227  icebox                  88.7%\n    8  Alberto Santini         3.1%\n    7  Manuel Santillan        2.7%\n    6  albertosantini          2.3%\n    3  Karthik Madathil        1.2%\n    2  Anand Patil             0.8%\n    1  Alex Proca              0.4%\n    1  Farrin Reid             0.4%\n    1  Koichiro Sobue          0.4%\n```\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/albertosantini/node-rio/issues"
  },
  "_id": "rio@2.4.1",
  "dist": {
    "shasum": "42f05bfd1e6de445e49a2e2279bf2876cdc44fb3"
  },
  "_from": "rio@",
  "_resolved": "https://registry.npmjs.org/rio/-/rio-2.4.1.tgz"
}
